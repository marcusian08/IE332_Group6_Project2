library(imager)
library(keras)
library(nloptr)
library(tensorflow)
library(reticulate)
pillow <- import('PIL')

# Setting working directory
setwd("C:/R Files/IE 332/Project 2")
getwd()

## Loading Model
# Load the image recognition model
model <- load_model_tf("C:/R Files/IE 332/Project 2/332_data-main/332_data-main/dandelion_model/")

## Model Summary
# summary(model)
# print(model)


## Loading Image
# Setting target size
width <- 224
height <- 224
target_size <- c(width, height)

# Reading Image
img <- image_load("C:/R Files/IE 332/Project 2/332_data-main/332_data-main/data-for-332/grass/5.jpg", target_size = target_size)

# Formatting Image
x <- image_to_array(img)
x <- array_reshape(x, c(1, dim(x)))
x <- x/225


pred <- model %>% predict(x) #[1,1] dandelion percentage, [1,2] grass percentage
if (pred[1,1] > .5) {
  trueImageClass <- "Dandelion"
} else {
  trueImageClass <- "Grass"
}
print(trueImageClass)

if (trueImageClass == "Grass"){
  target_label <- 2
  true_label <- 1
} else{
  target_label <- 1
  true_label <- 2
}


eps <- as.numeric(floor(224 * 224 * 0.01))

## Algorithm Functions
obj_func <- function(x, model,true_label, target_label, eps) {
  # Calculate the predicted probabilities for the input data point x
  preds <- predict(model, x, type = "prob")
  # Calculate the loss as the negative log-likelihood of the target label
  loss <- -log(preds[target_label] + 1)
  # Add the L0 penalty to the loss
  loss <- loss + eps * sum(x != 0)
  return(loss)
}


loss <- function(y_true, y_pred) {
  tf$keras$losses$CategoricalCrossentropy()(y_true, y_pred)
}


# Define the L0BFGS function to optimize the objective function
L0BFGS <- function(x0, model, true_label, target_label, eps) {
  result <- nloptr(x0 = x0, eval_f = obj_func, eval_grad_f = NULL, 
                   lb = NULL, ub = NULL,
                   opts = list(algorithm = "NLOPT_LN_BOBYQA", xtol_rel = 1e-4, maxeval = 1000),
                   model = model, true_label = true_label, target_label = target_label, eps = eps)
  return(result$solution)
}

# Generate an adversarial example using L0BFGS
x_adv <- L0BFGS(x, model, true_label, target_label, eps)

