# Libraries
library("tensorflow")
library("keras")
library("magick")
library("foreach")
library("doParallel")
library("plyr")
library("caret")
library(tidyverse)
library(reticulate)
library(imager)

# Load pre-trained model
model=load_model_tf("./332_data/332_data-main/dandelion_model")

# Pre-Classified lists
grassUnmod=list.files("./332_data/data-for-332/grass/")
dandUnmod=list.files("./332_data/data-for-332/dandelions/")

# Path to image that will be classified (change the index of grassUnmod[i] for specific image)
path <- paste("./332_data/data-for-332/grass/", grassUnmod[1],sep="")

# Initialization
width <- 224
height<- 224
target_size <- c(width, height)
rgb <- 3 #color channels

# Five Algorithms
algorithm1 <- function(image) {
  # Implement algorithm here
  return(adversarial_image)
}

algorithm2 <- function(image) {
  # Implement algorithm here
  return(adversarial_image)
}

algorithm3 <- function(image) {
  # Implement algorithm here
  return(adversarial_image)
}

algorithm4 <- function(image) {
  # Implement algorithm here
  return(adversarial_image)
}

algorithm5 <- function(image, epsilon, label, alpha = 0.01, tol = 0.0001, lambda = 0.001) {
  adv_image <- image
  # Define the loss function
  loss <- function(y_true, y_pred) {
    tf$keras$losses$CategoricalCrossentropy()(y_true, y_pred)
  }
  
  for (i in 1:10) {
    # Define the gradient function
    gradient <- function(x, label) {
      x_tensor <- array_reshape(x, c(1, 224, 224, 3))
      x_var <- tf$Variable(x_tensor)
      with(tf$GradientTape(persistent = TRUE), {
        loss_value <- loss(label, model %>% predict(x_var))
        grads <- gradients(loss_value, x_var)
        grads
      })
    }
    
    # Add perturbation to image
    grads <- gradient(adv_image, label)
    perturbation <- alpha * grads
    adv_image <- adv_image + perturbation
    
    # Clip the perturbation
    adv_image <- pmax(pmin(adv_image, image + epsilon), image - epsilon)
    
    # Ensure pixel values are in [0, 1]
    adv_image <- pmin(pmax(adv_image, 0), 1)
  }
  
  #image save
  save.image(adv_image, file = paste("./332_data/data-for-332/modified_grass/", path, "_modified", sep=""))
  return(adv_image)
}

# Default classification
image <- image_load(path, target_size = target_size)
image <- image_to_array(image)
image <- array_reshape(image, c(1,  dim(image)))
image <- image/255

pred <- model %>% predict(image) #[1,1] dandelion percentage, [1,2] grass percentage
if (pred[1,1] > .5) {
  trueImageClass <- "Dandelion"
} else {
  trueImageClass <- "Grass"
}

# Five modified images
modImages <- c(algorithm1(image, epsilon), algorithm2(image, epsilon), 
               algorithm3(image, epsilon), algorithm4(image, epsilon), 
               algorithm5(image, .1, 0))

# Create a matrix to hold the predictions of each algorithm for each sample
predictions <- matrix(nrow = 2, ncol = 5)
colnames(predictions) <- c("algorithm1", "algorithm2", "algorithm3", "algorithm4", "algorithm5")

# Fill in the matrix with the predictions of each algorithm
predictions[, "algorithm1"] <- model %>% predict(modImages[1])
predictions[, "algorithm2"] <- model %>% predict(modImages[2])
predictions[, "algorithm3"] <- model %>% predict(modImages[3])
predictions[, "algorithm4"] <- model %>% predict(modImages[4])
predictions[, "algorithm5"] <- model %>% predict(modImages[5])

# 2 cases
if (trueImageClass == "Dandelion") {
  predVector <- as.vector(predictions[1,])
  weights <- predVector / sum(predVector)
  
  # Weighted majority classifier
  weighted_majority <- function(preds, weights) {
    # Calculate the weighted sum of each algorithm
    class_sums <- sapply(preds, function(class) {
      sum(weights[preds == class])
    })
    
    # Return the algorithm with the highest weighted sum
    return(names(which.max(class_sums)))
  }
} else {
  predVector <- as.vector(predictions[2,])
  weights <- predVector / sum(predVector)
  
  # Weighted majority classifier
  weighted_majority <- function(preds, weights) {
    # Calculate the weighted sum of each class
    class_sums <- sapply(preds, function(class) {
      sum(weights[preds == class])
    })
    
    # Return the algorithm with the highest weighted sum
    return(names(which.max(class_sums)))
  }
}

# "Optimizer"
if (weighted_majority(predVector, weights) == "algorithm1") {
  algorithm1(image)
} 
if (weighted_majority(predVector, weights) == "algorithm2") {
  algorithm2(image)
}
if (weighted_majority(predVector, weights) == "algorithm3") {
  algorithm3(image)
}
if (weighted_majority(predVector, weights) == "algorithm4") {
  algorithm4(image)
}
if (weighted_majority(predVector, weights) == "algorithm5") {
  algorithm5(image)
}
